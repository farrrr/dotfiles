---
{{/* boolean feature tags */}}
{{- $headless := false -}}{{/* true if this machine does not have a screen and keyboard */}}
{{- $personal := false -}}{{/* true if this machine should have personal secrets */}}
{{- $devEnv := false -}}{{/* true if this machine is for development use */}}
{{- "" -}}

{{- $osID := .chezmoi.os -}}
{{- if (and (eq .chezmoi.os "linux") (hasKey .chezmoi.osRelease "id")) -}}
{{-   $osID = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{-   if (.chezmoi.kernel.osrelease | regexMatch "-microsoft-standard-WSL2$") -}}
{{-     $osID = printf "%s-%s" .chezmoi.os "wsl" -}}
{{-   end -}}
{{- end -}}


{{/* work around unreliable hostname on darwin */}}
{{- $hostname := .chezmoi.hostname -}}
{{- if eq .chezmoi.os "darwin" -}}
{{-   $hostname = promptStringOnce . "hostname" "Computer Name" -}}
{{-   $personal = true -}}
{{- end -}}


{{- $chassisChoices := list "desktop" "laptop" "server" -}}
{{- $email := "farrrr@gmail.com" -}}
{{- $chassisType := "server" -}}
{{- $githubOrg := "longshun-eco" -}}
{{- if stdinIsATTY -}}
{{-   $email = promptStringOnce . "email" "Your Email Address:" -}}
{{-   $headless = promptBoolOnce . "headless" "Headless machine:" -}}
{{-   $personal = promptBoolOnce . "personal" "Personal Use:" -}}
{{-   $devEnv = promptBoolOnce . "devEnv" "Dev Environment:" -}}
{{-   $chassisType = promptChoiceOnce . "chassisType" "Machine type:" $chassisChoices -}}
{{-   $githubOrg = promptStringOnce . "services.github.organization" "Github organization:" -}}
{{- else -}}
{{-   $headless = true -}}
{{-   $personal = false -}}
{{-   $devEnv = false -}}
{{-   $chassisType = "server" -}}
{{- end  -}}



# template data
data:
  email: {{ $email | quote }}
  headless: {{ $headless }}
  personal: {{ $personal }}
  osid: {{ $osID | quote }}
  hostname: {{ $hostname | quote }}
  chassisType: {{ $chassisType | quote }}
  devEnv: {{ $devEnv }}
  onepasswordAccount: "SQAYKGUCVJCWHFUFZJ4QUKXU6Q"
  atuin:
    user: "far"
  services:
    github:
      organization: {{ $githubOrg | quote }}
    git:
      name: "Far Tseng"
      email: {{ $email | quote }}
      signingKey: "ADFC5C75ED2320AAC2D400799725A67A8B5287C9"

# Encryption type, either age or gpg
encryption: age
# Extra environment variables for scripts and commands
env: {}
# Format for data output, either json or yaml
format: yaml
# Mode in target dir, either file or symlink
mode: file
# Display progress bars
progress: true
# Temporary directory for scripts
scriptTempDir:

completion:
  # Enable custom shell completions
  custom: false

diff:
  args:
  command:
  exclude: ["scripts", "externals"]
  pager: "diff-so-fancy"
  reverse: false
  scriptContents: true


edit:
  # Apply changes on exit
  apply: false
{{-  if or (eq $chassisType "laptop") (eq $chassisType "desktop") }}
  command: "code"
  # Extra args to edit command
  args: ["--wait"]
{{-  else  }}
  command: "nvim"
{{-  end  }}

git:
  # Add changes to the source state after any change
  autoAdd: false
  # Commit changes to the source state after any change
  autoCommit: false
  # Push changes to the source state after any change
  autoPush: false

gitHub:
  # Minimum duration between identical GitHub API requests
  refreshPeriod: "1m"

merge:
  command: "nvim"
  args:
    - -d
    - "{{ "{{ .Source }}" }}"
    - "{{ "{{ .Destination }}" }}"
    - "{{ "{{ .Target }}" }}"

update:
  # Apply after pulling
  apply: false
  recurseSubmodules: true
